"""Add dedup_hash field to Listing for hash-based deduplication

Revision ID: 0bfccac265c8
Revises: 0021
Create Date: 2025-10-18 14:54:34.390717

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0bfccac265c8'
down_revision: Union[str, Sequence[str], None] = '0021'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_cpu_id'), 'cpu', ['id'], unique=False)
    op.drop_index(op.f('ix_custom_field_audit_field'), table_name='custom_field_audit_log')
    op.create_index(op.f('ix_gpu_id'), 'gpu', ['id'], unique=False)
    op.add_column('listing', sa.Column('dedup_hash', sa.String(length=64), nullable=True))
    op.alter_column('listing', 'price_usd',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=False)
    op.alter_column('listing', 'other_components',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('listing', 'other_urls',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('listing', 'adjusted_price_usd',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.drop_index(op.f('idx_listing_dollar_per_cpu_multi'), table_name='listing')
    op.drop_index(op.f('idx_listing_dollar_per_cpu_multi_adj'), table_name='listing')
    op.drop_index(op.f('idx_listing_dollar_per_cpu_single'), table_name='listing')
    op.drop_index(op.f('idx_listing_dollar_per_cpu_single_adj'), table_name='listing')
    op.drop_index(op.f('idx_listing_form_factor'), table_name='listing')
    op.drop_index(op.f('idx_listing_manufacturer'), table_name='listing')
    op.drop_index(op.f('ix_listing_primary_storage_profile_id'), table_name='listing')
    op.drop_index(op.f('ix_listing_ram_spec_id'), table_name='listing')
    op.drop_index(op.f('ix_listing_ruleset_id'), table_name='listing')
    op.drop_index(op.f('ix_listing_secondary_storage_profile_id'), table_name='listing')
    op.drop_index(op.f('ix_listing_vendor_marketplace'), table_name='listing')
    op.create_index(op.f('ix_listing_dedup_hash'), 'listing', ['dedup_hash'], unique=False)
    op.alter_column('listing_component', 'metadata_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('listing_score_snapshot', 'adjusted_price_usd',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('profile', 'rule_group_weights',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('ram_spec', 'attributes_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('storage_profile', 'attributes_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('valuation_rule_action', 'value_usd',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('valuation_rule_action', 'modifiers_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment=None,
               existing_comment='Action multipliers configuration (JSONB). Supports two formats:\n\n        1. Dynamic Field-Based Multipliers (Primary Format):\n        {\n            "multipliers": [\n                {\n                    "name": "RAM Generation Multiplier",\n                    "field": "ram_spec.ddr_generation",\n                    "conditions": [\n                        {"value": "ddr3", "multiplier": 0.7},\n                        {"value": "ddr4", "multiplier": 1.0},\n                        {"value": "ddr5", "multiplier": 1.3}\n                    ]\n                }\n            ]\n        }\n\n        2. Legacy Condition Multipliers (Backward Compatible):\n        {\n            "condition_multipliers": {\n                "new": 1.0,\n                "refurb": 0.75,\n                "used": 0.6\n            }\n        }\n\n        Both formats can coexist in the same object. Field paths use dot notation\n        (e.g., "ram_spec.ddr_generation") to navigate nested structures. Multipliers\n        are applied sequentially in the order defined.\n\n        Empty object {} is valid and indicates no multipliers are applied.',
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.drop_index(op.f('idx_action_rule'), table_name='valuation_rule_action')
    op.alter_column('valuation_rule_audit', 'changes_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('valuation_rule_audit', 'impact_summary',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index(op.f('idx_audit_created'), table_name='valuation_rule_audit')
    op.drop_index(op.f('idx_audit_rule'), table_name='valuation_rule_audit')
    op.alter_column('valuation_rule_condition', 'value_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.drop_index(op.f('idx_condition_parent'), table_name='valuation_rule_condition')
    op.drop_index(op.f('idx_condition_rule'), table_name='valuation_rule_condition')
    op.alter_column('valuation_rule_group', 'weight',
               existing_type=sa.NUMERIC(precision=5, scale=4),
               type_=sa.Float(),
               existing_nullable=True,
               existing_server_default=sa.text('1.0'))
    op.alter_column('valuation_rule_group', 'metadata_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.drop_index(op.f('idx_rule_group_category'), table_name='valuation_rule_group')
    op.drop_index(op.f('idx_rule_group_ruleset'), table_name='valuation_rule_group')
    op.drop_index(op.f('ix_rule_group_entity_key'), table_name='valuation_rule_group')
    op.drop_index(op.f('ix_valuation_rule_group_is_active'), table_name='valuation_rule_group')
    op.alter_column('valuation_rule_v2', 'metadata_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.drop_index(op.f('idx_rule_v2_active'), table_name='valuation_rule_v2')
    op.drop_index(op.f('idx_rule_v2_eval_order'), table_name='valuation_rule_v2')
    op.drop_index(op.f('idx_rule_v2_group'), table_name='valuation_rule_v2')
    op.alter_column('valuation_rule_version', 'snapshot_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.drop_index(op.f('idx_version_rule'), table_name='valuation_rule_version')
    op.alter_column('valuation_ruleset', 'metadata_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('valuation_ruleset', 'conditions_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.drop_index(op.f('idx_ruleset_active'), table_name='valuation_ruleset')
    op.drop_index(op.f('idx_ruleset_created_by'), table_name='valuation_ruleset')
    op.drop_index(op.f('ix_valuation_ruleset_active_priority'), table_name='valuation_ruleset')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_valuation_ruleset_active_priority'), 'valuation_ruleset', ['is_active', 'priority'], unique=False)
    op.create_index(op.f('idx_ruleset_created_by'), 'valuation_ruleset', ['created_by'], unique=False)
    op.create_index(op.f('idx_ruleset_active'), 'valuation_ruleset', ['is_active'], unique=False)
    op.alter_column('valuation_ruleset', 'conditions_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('valuation_ruleset', 'metadata_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.create_index(op.f('idx_version_rule'), 'valuation_rule_version', ['rule_id'], unique=False)
    op.alter_column('valuation_rule_version', 'snapshot_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.create_index(op.f('idx_rule_v2_group'), 'valuation_rule_v2', ['group_id'], unique=False)
    op.create_index(op.f('idx_rule_v2_eval_order'), 'valuation_rule_v2', ['group_id', 'evaluation_order'], unique=False)
    op.create_index(op.f('idx_rule_v2_active'), 'valuation_rule_v2', ['is_active'], unique=False)
    op.alter_column('valuation_rule_v2', 'metadata_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.create_index(op.f('ix_valuation_rule_group_is_active'), 'valuation_rule_group', ['is_active'], unique=False)
    op.create_index(op.f('ix_rule_group_entity_key'), 'valuation_rule_group', [sa.literal_column("(metadata_json ->> 'entity_key'::text)")], unique=False)
    op.create_index(op.f('idx_rule_group_ruleset'), 'valuation_rule_group', ['ruleset_id'], unique=False)
    op.create_index(op.f('idx_rule_group_category'), 'valuation_rule_group', ['category'], unique=False)
    op.alter_column('valuation_rule_group', 'metadata_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('valuation_rule_group', 'weight',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=4),
               existing_nullable=True,
               existing_server_default=sa.text('1.0'))
    op.create_index(op.f('idx_condition_rule'), 'valuation_rule_condition', ['rule_id'], unique=False)
    op.create_index(op.f('idx_condition_parent'), 'valuation_rule_condition', ['parent_condition_id'], unique=False)
    op.alter_column('valuation_rule_condition', 'value_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.create_index(op.f('idx_audit_rule'), 'valuation_rule_audit', ['rule_id'], unique=False)
    op.create_index(op.f('idx_audit_created'), 'valuation_rule_audit', ['created_at'], unique=False)
    op.alter_column('valuation_rule_audit', 'impact_summary',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('valuation_rule_audit', 'changes_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_index(op.f('idx_action_rule'), 'valuation_rule_action', ['rule_id'], unique=False)
    op.alter_column('valuation_rule_action', 'modifiers_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='Action multipliers configuration (JSONB). Supports two formats:\n\n        1. Dynamic Field-Based Multipliers (Primary Format):\n        {\n            "multipliers": [\n                {\n                    "name": "RAM Generation Multiplier",\n                    "field": "ram_spec.ddr_generation",\n                    "conditions": [\n                        {"value": "ddr3", "multiplier": 0.7},\n                        {"value": "ddr4", "multiplier": 1.0},\n                        {"value": "ddr5", "multiplier": 1.3}\n                    ]\n                }\n            ]\n        }\n\n        2. Legacy Condition Multipliers (Backward Compatible):\n        {\n            "condition_multipliers": {\n                "new": 1.0,\n                "refurb": 0.75,\n                "used": 0.6\n            }\n        }\n\n        Both formats can coexist in the same object. Field paths use dot notation\n        (e.g., "ram_spec.ddr_generation") to navigate nested structures. Multipliers\n        are applied sequentially in the order defined.\n\n        Empty object {} is valid and indicates no multipliers are applied.',
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('valuation_rule_action', 'value_usd',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
    op.alter_column('storage_profile', 'attributes_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('ram_spec', 'attributes_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('profile', 'rule_group_weights',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('listing_score_snapshot', 'adjusted_price_usd',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
    op.alter_column('listing_component', 'metadata_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index(op.f('ix_listing_dedup_hash'), table_name='listing')
    op.create_index(op.f('ix_listing_vendor_marketplace'), 'listing', ['vendor_item_id', 'marketplace'], unique=False)
    op.create_index(op.f('ix_listing_secondary_storage_profile_id'), 'listing', ['secondary_storage_profile_id'], unique=False)
    op.create_index(op.f('ix_listing_ruleset_id'), 'listing', ['ruleset_id'], unique=False)
    op.create_index(op.f('ix_listing_ram_spec_id'), 'listing', ['ram_spec_id'], unique=False)
    op.create_index(op.f('ix_listing_primary_storage_profile_id'), 'listing', ['primary_storage_profile_id'], unique=False)
    op.create_index(op.f('idx_listing_manufacturer'), 'listing', ['manufacturer'], unique=False)
    op.create_index(op.f('idx_listing_form_factor'), 'listing', ['form_factor'], unique=False)
    op.create_index(op.f('idx_listing_dollar_per_cpu_single_adj'), 'listing', ['dollar_per_cpu_mark_single_adjusted'], unique=False)
    op.create_index(op.f('idx_listing_dollar_per_cpu_single'), 'listing', ['dollar_per_cpu_mark_single'], unique=False)
    op.create_index(op.f('idx_listing_dollar_per_cpu_multi_adj'), 'listing', ['dollar_per_cpu_mark_multi_adjusted'], unique=False)
    op.create_index(op.f('idx_listing_dollar_per_cpu_multi'), 'listing', ['dollar_per_cpu_mark_multi'], unique=False)
    op.alter_column('listing', 'adjusted_price_usd',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
    op.alter_column('listing', 'other_urls',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('listing', 'other_components',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('listing', 'price_usd',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=False)
    op.drop_column('listing', 'dedup_hash')
    op.drop_index(op.f('ix_gpu_id'), table_name='gpu')
    op.create_index(op.f('ix_custom_field_audit_field'), 'custom_field_audit_log', ['field_id', 'created_at'], unique=False)
    op.drop_index(op.f('ix_cpu_id'), table_name='cpu')
    # ### end Alembic commands ###
